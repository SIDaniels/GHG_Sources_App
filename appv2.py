{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#https://dash.plotly.com/dash-core-components/rangeslider\n",
    "\n",
    "\n",
    "external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']\n",
    "\n",
    "app = Dash(__name__, external_stylesheets=external_stylesheets)\n",
    "\n",
    "# Use the following function when accessing the value of 'my-range-slider'\n",
    "# in callbacks to transform the output value to logarithmic\n",
    "\n",
    "#def transform_value(value):\n",
    "#    return 10 ** value\n",
    "\n",
    "app.layout = html.Div([\n",
    "\n",
    "    html.Div([\n",
    "            dcc.Graph(id='graph')\n",
    "    ]),\n",
    "    \n",
    "    html.Div([\n",
    "        dcc.RangeSlider(\n",
    "        id='non-linear-range-slider',\n",
    "        marks={i: '{}'.format(10 ** i) for i in range(10)},\n",
    "        min=0,\n",
    "        max=9,\n",
    "        value=[0,9],\n",
    "        dots=False,\n",
    "        #step=1000,\n",
    "        #updatemode='drag'\n",
    "        ),\n",
    "    ]),\n",
    "    \n",
    "    ])\n",
    "\n",
    "@app.callback(\n",
    "    Output('graph', 'figure'),\n",
    "    Input('non-linear-range-slider', 'value'))\n",
    "def update_output(value):\n",
    "    all2_sub=all2_21_rev[(all2_21_rev['log10_emissions_quantity']>=value[0])&(all2_21_rev['log10_emissions_quantity']<=value[1])] #could be result of sql query and the result is what's required\n",
    "    #when run sql query only pull the columns that you need for the app code below\n",
    "    # Create figure\n",
    "    locations=[go.Scattermapbox(\n",
    "                    lon = all2_sub['Lat'],\n",
    "                    lat = all2_sub['Long'],\n",
    "                    mode='markers',\n",
    "                    #legendgroup = all2_sub['sector'],\n",
    "                    #marker=\n",
    "                    #dict(color=np.where(np.logical_and(all2_sub['sector']=='manufacturing', all2_sub['sector']=='power'), 'red', 'green')\n",
    "    #),\n",
    "                    #marker=dict(color = all2_sub['color']),\n",
    "#https://github.com/plotly/plotly.py/issues/2485\n",
    "                    marker =go.scattermapbox.Marker(\n",
    "\t\t            size=4,\n",
    "\t\t            color = all2_sub['color'],\n",
    "\t\t            #colorscale='rainbow',\n",
    "\t\t            opacity=0.5,\n",
    "\t\t            showscale=True,), #I don't know why this doesn't work... \n",
    "                    #unselected={'marker' : {'opacity':1}},\n",
    "                    #selected={'marker' : {'opacity':0.5, 'size':25}},\n",
    "                    hoverinfo='text',\n",
    "                    hovertext=all2_sub[['asset_name','emissions_quantity']],\n",
    "                    #customdata=all2_sub['website']\n",
    "    )]\n",
    "\n",
    "    # Return figure\n",
    "    return {\n",
    "        'data': locations,\n",
    "        'layout': go.Layout(\n",
    "            uirevision= 'foo', #preserves state of figure/map after callback activated\n",
    "            #clickmode= 'event+select',\n",
    "            #hovermode='closest',\n",
    "            #hoverdistance=2,\n",
    "            title=dict(text=\"Carbon Emissions Sites Across the Globe, 2021\",font=dict(size=50, color='green')),\n",
    "            mapbox=dict(\n",
    "                accesstoken=mapbox_access_token,\n",
    "                #bearing=25,\n",
    "                style='light',\n",
    "                center=dict(\n",
    "                    lat=40.80105,\n",
    "                    lon=-73.945155\n",
    "                ),\n",
    "                pitch=40,\n",
    "                zoom=1\n",
    "            ),\n",
    "        )\n",
    "    }\n",
    "\n",
    "\n",
    "    #'Linear Value: {}, Log Value: [{:0.2f}, {:0.2f}]'.format(\n",
    "    #    str(value),\n",
    "    #    transformed_value[0],\n",
    "    #    transformed_value[1]\n",
    "    #)\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    app.run_server(debug=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.8.13 ('classification')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "name": "python",
   "version": "3.8.13"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "b161b1c3207380de6396d2091c7e58ae16163ea816ef25fea719df5fe370bcac"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
